plot(c(1,5),c(1,5),xlab="x",ylab="y")
lines(c(1,5),c(1,5),col="red")
lines(c(1,5,5),c(1,1,5),col="green")
text(c(1.1,5.1), "v")
text(c(1.3), "v")
plot(c(1,5),c(1,5),xlab="x",ylab="y")
lines(c(1,5),c(1,5),col="red")
lines(c(1,5,5),c(1,1,5),col="green")
text(c(1.3), "v")
plot(c(1,5),c(1,5),xlab="x",ylab="y")
lines(c(1,5),c(1,5),col="red")
lines(c(1,5,5),c(1,1,5),col="green")
text(1.3, "v")
?points
text(0:25, 0.6, 0:25, cex = 0.5)
plot(c(1,5),c(1,5),xlab="x",ylab="y")
lines(c(1,5),c(1,5),col="red")
lines(c(1,5,5),c(1,1,5),col="green")
text(c(1.3,5.3),c(1.3,5.3),labels = c("v","w"))
plot(c(1,5),c(1,5),xlab="x",ylab="y")
lines(c(1,5),c(1,5),col="red")
lines(c(1,5,5),c(1,1,5),col="green")
text(c(1,1),c(5,5),labels = c("v","w"))
plot(c(1,5),c(1,5),xlab="x",ylab="y")
lines(c(1,5),c(1,5),col="red")
lines(c(1,5,5),c(1,1,5),col="green")
text(c(1,5),c(1,5),labels = c("v","w"))
plot(c(1,5),c(1,5),xlab="x",ylab="y")
lines(c(1,5),c(1,5),col="red")
lines(c(1,5,5),c(1,1,5),col="green")
text(c(1,5.2),c(1.2,5),labels = c("v","w"))
plot(c(1,5),c(1,5),xlab="x",ylab="y")
lines(c(1,5),c(1,5),col="red")
lines(c(1,5,5),c(1,1,5),col="green")
text(c(1,4.8),c(1.2,4.8),labels = c("v","w"))
plot(c(1,5),c(1,5),xlab="x",ylab="y")
lines(c(1,5),c(1,5),col="red")
lines(c(1,5,5),c(1,1,5),col="green")
text(c(1,4.9),c(1.1,4.9),labels = c("v","w"))
plot(c(1,5),c(1,5),xlab="x",ylab="y")
lines(c(1,5),c(1,5),col="red")
lines(c(1,5,5),c(1,1,5),col="green")
text(c(1,4.9),c(1.2,4.9),labels = c("v","w"))
plot(c(1,5),c(1,5),xlab="x",ylab="y")
lines(c(1,5),c(1,5),col="red")
lines(c(1,5,5),c(1,1,5),col="green")
text(c(1,4.9),c(1.2,4.8),labels = c("v","w"))
plot(c(1,5),c(1,5),xlab="x",ylab="y",ylim=0:6)
lines(c(1,5),c(1,5),col="red")
lines(c(1,5,5),c(1,1,5),col="green")
text(c(1,4.9),c(1.2,4.8),labels = c("v","w"))
source('~/.active-rstudio-document')
plot(c(1,5),c(1,5),xlab="x",ylab="y",ylim=c(0,6))
lines(c(1,5),c(1,5),col="red")
lines(c(1,5,5),c(1,1,5),col="green")
text(c(1,5),c(1.2,5.2),labels = c("v","w"))
plot(c(1,5),c(1,5),xlab="x",ylab="y",ylim=c(0,6))
lines(c(1,5),c(1,5),col="red")
lines(c(1,5,5),c(1,1,5),col="green")
text(c(1,5),c(1,5),labels = c("v","w"),pos=3)
?ploymath
?plotmath
demo(plotmath)
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
demo(plotmath)
source('~/.active-rstudio-document')
text(4, 3, expression(hat(beta) == (X^t * X)^{-1} * X^t * y))
plot(c(1,5),c(1,5),xlab="x",ylab="y",ylim=c(0,6))
lines(c(1,5),c(1,5),col="red")
lines(c(1,5,5),c(1,1,5),col="green")
text(c(1,5),c(1,5),labels = expression(vec(v),vec(w)),pos=3)
text(c(1,5),c(1,5),labels = latex2exp(vec(v),vec(w)),pos=3)
source('~/.active-rstudio-document')
install.packages("latex2exp")
source('~/.active-rstudio-document')
help("latex2exp-deprecated")
install.packages("latex2exp")
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
load("C:/Users/sandy/Dropbox/2014_Sandy/Proposta de Tese/Implementações/.RData")
install.packages("latex2exp")
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
install.packages("TeX")
install.packages("TeX")
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
?TeX
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
a <- 1:100
plot(a, a^2, xlab=TeX("$\\alpha$"), ylab=TeX("$\\alpha^2$"))
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
library("parallel")
library("foreach")
library("doParallel")
detectCores()
q()
q()
source('C:/Users/sandy/Dropbox/2014_Sandy/DynamicCommunities/DynamicCommunities/DynamicalCommunities.R')
T && F
T || F
xor(T,T)
range(2,6)
3 in range(2,6)
?ramge
?range
d = min(dens,comumaxavgdegree)
g = make_empty_graph(0,F)
V(g)$p = 0
g = born(g)
source('C:/Users/sandy/Dropbox/2014_Sandy/DynamicCommunities/DynamicCommunities/DynamicalCommunities.R')
g = make_empty_graph(0,F)
V(g)$p = 0
g = born(g)
dens = densidadeComunidade(g)
narestasout = length(E(g)[V(g)[V(g)$p==idcomu] %--% V(g)[V(g)$p!=idcomu]])
idcomu=1
narestasout = length(E(g)[V(g)[V(g)$p==idcomu] %--% V(g)[V(g)$p!=idcomu]])
comumaxavgdegree = (((maxdegree*tamcomu)/2) - narestasout)/(tamcomu*(tamcomu-1)/2)
tamcomu = vcount(g)
V(g)$p
comumaxavgdegree = (((maxdegree*tamcomu)/2) - narestasout)/(tamcomu*(tamcomu-1)/2)
d = min(mean(dens),comumaxavgdegree)
d = max(d,mean(degree(g))/tamcomu)
mean(degree(g))
mean(degree(g))/tamcomu
source('C:/Users/sandy/Dropbox/2014_Sandy/DynamicCommunities/DynamicCommunities/DynamicalCommunities.R')
source('C:/Users/sandy/Dropbox/2014_Sandy/DynamicCommunities/DynamicCommunities/DynamicalCommunities.R')
source('C:/Users/sandy/Dropbox/2014_Sandy/DynamicCommunities/DynamicCommunities/DynamicalCommunities.R')
set.seed(seed)
g = make_empty_graph(0,F)
V(g)$p = 0
g = born(g)
idcomu=1
tamcomu=vcount(g)
dens = densidadeComunidade(g)
narestasout = length(E(g)[V(g)[V(g)$p==idcomu] %--% V(g)[V(g)$p!=idcomu]])
comumaxavgdegree = (((maxdegree*tamcomu)/2) - narestasout)/(tamcomu*(tamcomu-1)/2)
(((maxdegree*tamcomu)/2) - narestasout)
(tamcomu*(tamcomu-1)/2)
440/231
d = min(mean(dens),comumaxavgdegree)
d = max(d,mean(degree(g))/tamcomu)
avgdegree/tamcomu
d = max(d,avgdegree/tamcomu)
source('C:/Users/sandy/Dropbox/2014_Sandy/DynamicCommunities/DynamicCommunities/DynamicalCommunities.R')
source('C:/Users/sandy/Dropbox/2014_Sandy/DynamicCommunities/DynamicCommunities/DynamicalCommunities.R')
??complete
??clique
??full
nv = sample(minsize:maxsize,1)
g = make_full_graph(nv)
while(mean(degree(g))>avgdegree+1){
vaux = sample(nv,2,replace=F)
delete.edges(g,vaux)
}
nv = sample(minsize:maxsize,1)
g = make_full_graph(nv)
vaux = sample(nv,2,replace=F)
ecount(g)
nv = sample(minsize:maxsize,1)
g = make_full_graph(nv)
while(mean(degree(g))>avgdegree+1){
vaux = sample(nv,2,replace=F)
delete.edges(g,vaux)
print(ecount(g))
}
nv = sample(minsize:maxsize,1)
g = make_full_graph(nv)
while(mean(degree(g))>avgdegree+1){
vaux = sample(nv,2,replace=F)
g = delete.edges(g,vaux)
print(ecount(g))
}
nvertices = 300
avgdegree = 20
maxdegree = 40
mixing = 0.05
toleranciamixing = 0.03
minsize = 20
maxsize = 60
nv = sample(minsize:maxsize,1)
g = make_full_graph(nv)
V(g)$p=1
V(g)$p
source('C:/Users/sandy/Dropbox/2014_Sandy/DynamicCommunities/DynamicCommunities/DynamicalCommunities.R')
source('C:/Users/sandy/Dropbox/2014_Sandy/DynamicCommunities/DynamicCommunities/DynamicalCommunities.R')
nv = sample(minsize:maxsize,1)
g = make_full_graph(nv)
V(g)$p=1
while(mean(degree(g))>avgdegree+1){
vaux = sample(nv,2,replace=F)
g = delete.edges(g,vaux)
}
g = born(g)
temp = 0
vcount(g)
for (i in 1:vcount(g)){
vout = length(E(g)[i %--% V(g)[V(g)$p!=V(g)[i]$p]])
vtotal = degree(g,i)
temp = temp +vout/vtotal
}
degree(g)
plot(g)
nv = sample(minsize:maxsize,1)
g = make_full_graph(nv)
V(g)$p=1
while(mean(degree(g))>avgdegree+1){
v1 = sample(nv,1)
while(degree(g,v1)<=1){
v1 = sample(nv,1)
}
aux = c(1:nv)
aux = aux[aux!=v1]
while(degree(g,v2)<=1){
v2 = sample(aux,1)
}
g = delete.edges(g,c(v1,v2))
}
nv = sample(minsize:maxsize,1)
g = make_full_graph(nv)
V(g)$p=1
while(mean(degree(g))>avgdegree+1){
v1 = sample(nv,1)
while(degree(g,v1)<=1){
v1 = sample(nv,1)
}
aux = c(1:nv)
aux = aux[aux!=v1]
v2 = sample(aux,1)
while(degree(g,v2)<=1){
v2 = sample(aux,1)
}
g = delete.edges(g,c(v1,v2))
}
plot(g)
nv = sample(minsize:maxsize,1)
g = make_full_graph(nv)
V(g)$p=1
plot(g)
mean(degree(g))>avgdegree+1
v1 = sample(nv,1)
while(degree(g,v1)<=1){
v1 = sample(nv,1)
}
aux = c(1:nv)
aux = aux[aux!=v1]
v2 = sample(aux,1)
while(degree(g,v2)<=1){
v2 = sample(aux,1)
}
g = delete.edges(g,c(v1,v2))
nv = sample(minsize:maxsize,1)
g = make_full_graph(nv)
V(g)$p=1
while(mean(degree(g))>avgdegree+1){
v1 = sample(nv,1)
while(degree(g,v1)<=1){
v1 = sample(nv,1)
}
aux = c(1:nv)
aux = aux[aux!=v1]
v2 = sample(aux,1)
while(degree(g,v2)<=1){
v2 = sample(aux,1)
}
g = delete.edges(g,c(v1,v2))
print(degree(g))
}
nv = sample(minsize:maxsize,1)
g = make_full_graph(nv)
V(g)$p=1
while(mean(degree(g))>avgdegree+1){
v1 = sample(nv,1)
while(degree(g,v1)<=1){
v1 = sample(nv,1)
}
aux = c(1:nv)
aux = aux[aux!=v1]
v2 = sample(aux,1)
while(degree(g,v2)<=1){
v2 = sample(aux,1)
}
g = delete.edges(g,c(v1,v2))
print(degree(g))
}
v1 = sample(nv,1)
while(degree(g,v1)<=1){
v1 = sample(nv,1)
v1 = sample(nv,1)
}
v1 = sample(nv,1)
v1 = sample(nv,1)
v1 = sample(nv,1)
??neighbors
nv = sample(minsize:maxsize,1)
g = make_full_graph(nv)
V(g)$p=1
while(mean(degree(g))>avgdegree+1){
v1 = sample(nv,1)
while(degree(g,v1)<=2){
v1 = sample(nv,1)
}
v2 = sample(neighbors(g,v1),1)
while(degree(g,v2)<=2){
v2 = sample(neighbors(g,v1),1)
}
g = delete.edges(g,c(v1,v2))
print(degree(g))
}
nv = sample(minsize:maxsize,1)
g = make_full_graph(nv)
V(g)$p=1
while(mean(degree(g))>avgdegree+1){
v1 = sample(nv,1)
while(degree(g,v1)<=2){
v1 = sample(nv,1)
}
v2 = sample(neighbors(g,v1),1)
while(degree(g,v2)<=2){
v2 = sample(neighbors(g,v1),1)
}
cat(v1,v2,"\n",sep=" ")
g = delete.edges(g,c(v1,v2))
}
source('C:/Users/sandy/Dropbox/2014_Sandy/DynamicCommunities/DynamicCommunities/DynamicalCommunities.R')
set.seed(seed)
nv = sample(minsize:maxsize,1)
g = make_full_graph(nv)
V(g)$p=1
while(mean(degree(g))>avgdegree+1){
v1 = sample(nv,1)
while(degree(g,v1)<=2){
v1 = sample(nv,1)
}
v2 = sample(neighbors(g,v1),1)
while(degree(g,v2)<=2){
v2 = sample(neighbors(g,v1),1)
}
cat(v1,v2,"\n",sep=" ")
g = delete.edges(g,c(v1,v2))
}
degree(g)
set.seed(seed)
nv = sample(minsize:maxsize,1)
g = make_full_graph(nv)
V(g)$p=1
v1 = sample(nv,1)
while(degree(g,v1)<=2){
v1 = sample(nv,1)
}
v2 = sample(neighbors(g,v1),1)
neighbors(g,v1)
as.vector(neighbors(g,v1))
set.seed(seed)
nv = sample(minsize:maxsize,1)
g = make_full_graph(nv)
V(g)$p=1
while(mean(degree(g))>avgdegree+1){
v1 = sample(nv,1)
while(degree(g,v1)<=2){
v1 = sample(nv,1)
}
v2 = sample(as.vector(neighbors(g,v1)),1)
while(degree(g,v2)<=2){
v2 = sample(as.vector(neighbors(g,v1)),1)
}
cat(v1,v2,"\n",sep=" ")
g = delete.edges(g,c(v1,v2))
}
degree(g)
set.seed(seed)
nv = sample(minsize:maxsize,1)
g = make_full_graph(nv)
V(g)$p=1
v1 = sample(nv,1)
while(degree(g,v1)<=2){
v1 = sample(nv,1)
}
v2 = sample(as.vector(neighbors(g,v1)),1)
as.vector(neighbors(g,v1))
while(degree(g,v2)<=2){
v2 = sample(as.vector(neighbors(g,v1)),1)
}
cat(v1,v2,"\n",sep=" ")
while(mean(degree(g))>avgdegree+1){
v1 = sample(nv,1)
while(degree(g,v1)<2){
v1 = sample(nv,1)
}
v2 = sample(as.vector(neighbors(g,v1)),1)
while(degree(g,v2)<2){
v2 = sample(as.vector(neighbors(g,v1)),1)
}
cat(v1,v2,"\n",sep=" ")
g = delete.edges(g,c(v1,v2))
}
degree(g)
set.seed(seed)
nv = sample(minsize:maxsize,1)
g = make_full_graph(nv)
V(g)$p=1
while(mean(degree(g))>avgdegree+1){
v1 = sample(nv,1)
while(degree(g,v1)<2){
v1 = sample(nv,1)
}
v2 = sample(as.vector(neighbors(g,v1)),1)
while(degree(g,v2)<2){
v2 = sample(as.vector(neighbors(g,v1)),1)
}
cat(v1,v2,"\n",sep=" ")
g = delete.edges(g,c(v1,v2))
print(degree(g))
}
?degree
degree(g,1)
degree(g,2)
degree(g,3)
degree(g,4)
sample(nv,1)
sample(nv,1)
sample(nv,1)
sample(nv,1)
sample(nv,1)
sample(nv,1)
sample(nv,1)
sample(nv,1)
sample(nv,1)
sample(nv,1)
set.seed(seed)
nv = sample(minsize:maxsize,1)
g = make_full_graph(nv)
V(g)$p=1
while(mean(degree(g))>avgdegree+1){
v1 = sample(1:nv,1)
while(degree(g,v1)<2){
v1 = sample(1:nv,1)
}
v2 = sample(as.vector(neighbors(g,v1)),1)
while(degree(g,v2)<2){
v2 = sample(as.vector(neighbors(g,v1)),1)
}
cat(v1,v2,"\n",sep=" ")
g = delete.edges(g,c(v1,v2))
print(degree(g))
}
?sample
??delete
edge(v1,v2)
g = g - edge(v1,v2)
set.seed(seed)
nv = sample(minsize:maxsize,1)
g = make_full_graph(nv)
V(g)$p=1
while(mean(degree(g))>avgdegree+1){
v1 = sample(1:nv,1)
while(degree(g,v1)<2){
v1 = sample(1:nv,1)
}
v2 = sample(as.vector(neighbors(g,v1)),1)
while(degree(g,v2)<2){
v2 = sample(as.vector(neighbors(g,v1)),1)
}
cat(v1,v2,"\n",sep=" ")
g = g - edge(v1,v2)
print(degree(g))
}
??edgelist
as_edgelist(g)
??get.edge.ids
aresta = get.edge.ids(g,c(v1,v2))
set.seed(seed)
nv = sample(minsize:maxsize,1)
g = make_full_graph(nv)
V(g)$p=1
while(mean(degree(g))>avgdegree+1){
v1 = sample(1:nv,1)
while(degree(g,v1)<2){
v1 = sample(1:nv,1)
}
v2 = sample(as.vector(neighbors(g,v1)),1)
while(degree(g,v2)<2){
v2 = sample(as.vector(neighbors(g,v1)),1)
}
cat(v1,v2,"\n",sep=" ")
aresta = get.edge.ids(g,c(v1,v2))
g = delete.edges(g,aresta)
print(degree(g))
}
source('C:/Users/sandy/Dropbox/2014_Sandy/DynamicCommunities/DynamicCommunities/DynamicalCommunities.R')
source('C:/Users/sandy/Dropbox/2014_Sandy/DynamicCommunities/DynamicCommunities/DynamicalCommunities.R')
st
source('C:/Users/sandy/Dropbox/2014_Sandy/DynamicCommunities/DynamicCommunities/DynamicalCommunities.R')
