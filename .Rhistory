plot(c(1,1,5,5),type="l")
plot(c(1,5),c(1,5),type="l")
plot(c(1,5),c(1,5))
lines(c(1,5),c(1,5))
grid)
grid()
plot(c(1,5),c(1,5))
lines(c(1,5),c(1,5),col="green")
lines(c(1,2,3,4,5),c(1,2,3,4,5),col="red")
lines(c(1,2,2,3,4,4,5),c(1,1,2,3,3,4,5,5),col="green")
lines(c(1,2,2,3,3,4,4,5,5),c(1,1,2,2,3,3,4,4,5),col="green")
plot(c(1,5),c(1,5),xlab="x",ylab="y")
lines(c(1,5),c(1,5),col="red")
lines(c(1,2,2,3,3,4,4,5,5),c(1,1,2,2,3,3,4,4,5),col="green")
source('~/.active-rstudio-document')
?plot
?lines
source('~/.active-rstudio-document')
?arrows
source('~/.active-rstudio-document')
?text
plot(-1:1, -1:1, type = "n", xlab = "Re", ylab = "Im")
K <- 16; text(exp(1i * 2 * pi * (1:K) / K), col = 2)
plot(c(1,5),c(1,5),xlab="x",ylab="y")
lines(c(1,5),c(1,5),col="red")
lines(c(1,5,5),c(1,1,5),col="green")
text(c(1,5), "v")
plot(c(1,5),c(1,5),xlab="x",ylab="y")
lines(c(1,5),c(1,5),col="red")
lines(c(1,5,5),c(1,1,5),col="green")
text(c(1.1,5.1), "v")
text(c(1.3), "v")
plot(c(1,5),c(1,5),xlab="x",ylab="y")
lines(c(1,5),c(1,5),col="red")
lines(c(1,5,5),c(1,1,5),col="green")
text(c(1.3), "v")
plot(c(1,5),c(1,5),xlab="x",ylab="y")
lines(c(1,5),c(1,5),col="red")
lines(c(1,5,5),c(1,1,5),col="green")
text(1.3, "v")
?points
text(0:25, 0.6, 0:25, cex = 0.5)
plot(c(1,5),c(1,5),xlab="x",ylab="y")
lines(c(1,5),c(1,5),col="red")
lines(c(1,5,5),c(1,1,5),col="green")
text(c(1.3,5.3),c(1.3,5.3),labels = c("v","w"))
plot(c(1,5),c(1,5),xlab="x",ylab="y")
lines(c(1,5),c(1,5),col="red")
lines(c(1,5,5),c(1,1,5),col="green")
text(c(1,1),c(5,5),labels = c("v","w"))
plot(c(1,5),c(1,5),xlab="x",ylab="y")
lines(c(1,5),c(1,5),col="red")
lines(c(1,5,5),c(1,1,5),col="green")
text(c(1,5),c(1,5),labels = c("v","w"))
plot(c(1,5),c(1,5),xlab="x",ylab="y")
lines(c(1,5),c(1,5),col="red")
lines(c(1,5,5),c(1,1,5),col="green")
text(c(1,5.2),c(1.2,5),labels = c("v","w"))
plot(c(1,5),c(1,5),xlab="x",ylab="y")
lines(c(1,5),c(1,5),col="red")
lines(c(1,5,5),c(1,1,5),col="green")
text(c(1,4.8),c(1.2,4.8),labels = c("v","w"))
plot(c(1,5),c(1,5),xlab="x",ylab="y")
lines(c(1,5),c(1,5),col="red")
lines(c(1,5,5),c(1,1,5),col="green")
text(c(1,4.9),c(1.1,4.9),labels = c("v","w"))
plot(c(1,5),c(1,5),xlab="x",ylab="y")
lines(c(1,5),c(1,5),col="red")
lines(c(1,5,5),c(1,1,5),col="green")
text(c(1,4.9),c(1.2,4.9),labels = c("v","w"))
plot(c(1,5),c(1,5),xlab="x",ylab="y")
lines(c(1,5),c(1,5),col="red")
lines(c(1,5,5),c(1,1,5),col="green")
text(c(1,4.9),c(1.2,4.8),labels = c("v","w"))
plot(c(1,5),c(1,5),xlab="x",ylab="y",ylim=0:6)
lines(c(1,5),c(1,5),col="red")
lines(c(1,5,5),c(1,1,5),col="green")
text(c(1,4.9),c(1.2,4.8),labels = c("v","w"))
source('~/.active-rstudio-document')
plot(c(1,5),c(1,5),xlab="x",ylab="y",ylim=c(0,6))
lines(c(1,5),c(1,5),col="red")
lines(c(1,5,5),c(1,1,5),col="green")
text(c(1,5),c(1.2,5.2),labels = c("v","w"))
plot(c(1,5),c(1,5),xlab="x",ylab="y",ylim=c(0,6))
lines(c(1,5),c(1,5),col="red")
lines(c(1,5,5),c(1,1,5),col="green")
text(c(1,5),c(1,5),labels = c("v","w"),pos=3)
?ploymath
?plotmath
demo(plotmath)
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
demo(plotmath)
source('~/.active-rstudio-document')
text(4, 3, expression(hat(beta) == (X^t * X)^{-1} * X^t * y))
plot(c(1,5),c(1,5),xlab="x",ylab="y",ylim=c(0,6))
lines(c(1,5),c(1,5),col="red")
lines(c(1,5,5),c(1,1,5),col="green")
text(c(1,5),c(1,5),labels = expression(vec(v),vec(w)),pos=3)
text(c(1,5),c(1,5),labels = latex2exp(vec(v),vec(w)),pos=3)
source('~/.active-rstudio-document')
install.packages("latex2exp")
source('~/.active-rstudio-document')
help("latex2exp-deprecated")
install.packages("latex2exp")
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
load("C:/Users/sandy/Dropbox/2014_Sandy/Proposta de Tese/Implementações/.RData")
install.packages("latex2exp")
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
install.packages("TeX")
install.packages("TeX")
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
?TeX
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
a <- 1:100
plot(a, a^2, xlab=TeX("$\\alpha$"), ylab=TeX("$\\alpha^2$"))
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
library("parallel")
library("foreach")
library("doParallel")
detectCores()
q()
q()
source('C:/Users/sandy/Dropbox/2014_Sandy/DynamicCommunities/DynamicCommunities/repositorioClassesGrafos.R')
source('C:/Users/sandy/Dropbox/2014_Sandy/DynamicCommunities/DynamicCommunities/repositorioClassesGrafos.R')
source('C:/Users/sandy/Dropbox/2014_Sandy/DynamicCommunities/DynamicCommunities/repositorioClassesGrafos.R')
grafoInicial = criarGrafoInicial(path)
g = grafoInicial
espaco = V(g)[degree(g,V(g))<maxdegree]
espaco = as.vector(V(g)[degree(g,V(g))<maxdegree])
v1 = sample(espaco,1)
idcomu = V(g)[v1]$p
vizinhos = as.vector(neighbors(g,v1))
vizinhos = vizinhos[V(g)$p!=idcomu]
vizinhos = as.vector(neighbors(g,v1))
vizinhos = as.vector(neighbors(g,v1))
vizinhos = vizinhos[V(g)[vizinhos]$p!=idcomu]
vizinhos = vizinhos[degree(g,vizinhos)>1]
v2 = sample(vizinhos,1)
length(vizinhos)<2
v1 = sample(espaco,1)
vizinhos(neighbors(g,v1))
vizinhos =neighbors(g,v1)
length(vizinhos)<2
espaco = as.vector(V(g)[degree(g,V(g))<maxdegree])
v1 = sample(espaco,1)
idcomu = V(g)[v1]$p
vizinhos = as.vector(neighbors(g,v1))
vizinhos = vizinhos[V(g)[vizinhos]$p!=idcomu]
vizinhos = vizinhos[degree(g,vizinhos)>1]
while(length(vizinhos)<2){
v1 = sample(espaco,1)
idcomu = V(g)[v1]$p
vizinhos = as.vector(neighbors(g,v1))
vizinhos = vizinhos[V(g)[vizinhos]$p!=idcomu]
vizinhos = vizinhos[degree(g,vizinhos)>1]
}
v2 = sample(vizinhos,1)
aresta = get.edge.ids(g,c(v1,v2))
g = delete.edges(g,aresta)
g = simplify(g)
if(msgDebug){
if(x != round(mean(degree(g)))){
x = round(mean(degree(g)))
cat("",x)
}
}
}
if(msgDebug){
cat("\nGrau Down:")
}
x = 0
while(mean(degree(g)) > avgdegree){
espaco = as.vector(V(g)[degree(g,V(g))<maxdegree])
v1 = sample(espaco,1)
idcomu = V(g)[v1]$p
vizinhos = as.vector(neighbors(g,v1))
vizinhos = vizinhos[V(g)[vizinhos]$p!=idcomu]
vizinhos = vizinhos[degree(g,vizinhos)>1]
while(length(vizinhos)<2){
v1 = sample(espaco,1)
idcomu = V(g)[v1]$p
vizinhos = as.vector(neighbors(g,v1))
vizinhos = vizinhos[V(g)[vizinhos]$p!=idcomu]
vizinhos = vizinhos[degree(g,vizinhos)>1]
}
v2 = sample(vizinhos,1)
aresta = get.edge.ids(g,c(v1,v2))
g = delete.edges(g,aresta)
g = simplify(g)
if(msgDebug){
if(x != round(mean(degree(g)))){
x = round(mean(degree(g)))
cat("",x)
}
}
}
if(msgDebug){
cat("\nGrau Down:")
}
x = 0
while(mean(degree(g)) > (avgdegree/3)){
espaco = as.vector(V(g)[degree(g,V(g))<maxdegree])
v1 = sample(espaco,1)
idcomu = V(g)[v1]$p
vizinhos = as.vector(neighbors(g,v1))
vizinhos = vizinhos[V(g)[vizinhos]$p!=idcomu]
vizinhos = vizinhos[degree(g,vizinhos)>1]
while(length(vizinhos)<2){
v1 = sample(espaco,1)
idcomu = V(g)[v1]$p
vizinhos = as.vector(neighbors(g,v1))
vizinhos = vizinhos[V(g)[vizinhos]$p!=idcomu]
vizinhos = vizinhos[degree(g,vizinhos)>1]
}
v2 = sample(vizinhos,1)
aresta = get.edge.ids(g,c(v1,v2))
g = delete.edges(g,aresta)
g = simplify(g)
if(msgDebug){
if(x != round(mean(degree(g)))){
x = round(mean(degree(g)))
cat("",x)
}
}
}
g = grafoInicial
if(msgDebug){
cat("\nGrau Down:")
}
x = 0
while(mean(degree(g)) > (avgdegree/3)){
espaco = V(g)[degree(g,V(g))<maxdegree]
v1 = sample(espaco,1)
idcomu = V(g)[v1]$p
vizinhos = as.vector(neighbors(g,v1))
vizinhos = vizinhos[V(g)$p!=idcomu]
vizinhos = vizinhos[degree(g,vizinhos)>1]
while(length(vizinhos)<2){
v1 = sample(espaco,1)
idcomu = V(g)[v1]$p
vizinhos = as.vector(neighbors(g,v1))
vizinhos = vizinhos[V(g)$p!=idcomu]
vizinhos = vizinhos[degree(g,vizinhos)>1]
}
v2 = sample(vizinhos,1)
aresta = get.edge.ids(g,c(v1,v2))
g = delete.edges(g,aresta)
g = simplify(g)
if(msgDebug){
if(x != round(mean(degree(g)))){
x = round(mean(degree(g)))
cat("",x)
}
}
}
if(msgDebug){
cat("\nGrau Down:")
}
x = 0
while(mean(degree(g)) > avgdegree){
espaco = as.vector(V(g)[degree(g,V(g))<maxdegree])
v1 = sample(espaco,1)
idcomu = V(g)[v1]$p
vizinhos = as.vector(neighbors(g,v1))
vizinhos = vizinhos[V(g)[vizinhos]$p!=idcomu]
vizinhos = vizinhos[degree(g,vizinhos)>1]
while(length(vizinhos)<2){
v1 = sample(espaco,1)
idcomu = V(g)[v1]$p
vizinhos = as.vector(neighbors(g,v1))
vizinhos = vizinhos[V(g)[vizinhos]$p!=idcomu]
vizinhos = vizinhos[degree(g,vizinhos)>1]
}
v2 = sample(vizinhos,1)
aresta = get.edge.ids(g,c(v1,v2))
g = delete.edges(g,aresta)
g = simplify(g)
if(msgDebug){
if(x != round(mean(degree(g)))){
x = round(mean(degree(g)))
cat("",x)
}
}
}
g = grafoInicial
if(msgDebug){
cat("\nGrau Down:")
}
x = 0
while(mean(degree(g)) > (avgdegree/3)){
espaco = as.vector(V(g)[degree(g,V(g))<maxdegree])
v1 = sample(espaco,1)
idcomu = V(g)[v1]$p
vizinhos = as.vector(neighbors(g,v1))
vizinhos = vizinhos[V(g)[vizinhos]$p!=idcomu]
vizinhos = vizinhos[degree(g,vizinhos)>1]
while(length(vizinhos)<2){
v1 = sample(espaco,1)
idcomu = V(g)[v1]$p
vizinhos = as.vector(neighbors(g,v1))
vizinhos = vizinhos[V(g)[vizinhos]$p!=idcomu]
vizinhos = vizinhos[degree(g,vizinhos)>1]
}
v2 = sample(vizinhos,1)
aresta = get.edge.ids(g,c(v1,v2))
g = delete.edges(g,aresta)
g = simplify(g)
if(msgDebug){
if(x != round(mean(degree(g)))){
x = round(mean(degree(g)))
cat("",x)
}
}
}
source('C:/Users/sandy/Dropbox/2014_Sandy/DynamicCommunities/DynamicCommunities/repositorioClassesGrafos.R')
source('C:/Users/sandy/Dropbox/2014_Sandy/DynamicCommunities/DynamicCommunities/repositorioClassesGrafos.R')
