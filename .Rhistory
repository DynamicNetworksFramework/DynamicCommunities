plot(c(1,1,5,5),type="l")
plot(c(1,5),c(1,5),type="l")
plot(c(1,5),c(1,5))
lines(c(1,5),c(1,5))
grid)
grid()
plot(c(1,5),c(1,5))
lines(c(1,5),c(1,5),col="green")
lines(c(1,2,3,4,5),c(1,2,3,4,5),col="red")
lines(c(1,2,2,3,4,4,5),c(1,1,2,3,3,4,5,5),col="green")
lines(c(1,2,2,3,3,4,4,5,5),c(1,1,2,2,3,3,4,4,5),col="green")
plot(c(1,5),c(1,5),xlab="x",ylab="y")
lines(c(1,5),c(1,5),col="red")
lines(c(1,2,2,3,3,4,4,5,5),c(1,1,2,2,3,3,4,4,5),col="green")
source('~/.active-rstudio-document')
?plot
?lines
source('~/.active-rstudio-document')
?arrows
source('~/.active-rstudio-document')
?text
plot(-1:1, -1:1, type = "n", xlab = "Re", ylab = "Im")
K <- 16; text(exp(1i * 2 * pi * (1:K) / K), col = 2)
plot(c(1,5),c(1,5),xlab="x",ylab="y")
lines(c(1,5),c(1,5),col="red")
lines(c(1,5,5),c(1,1,5),col="green")
text(c(1,5), "v")
plot(c(1,5),c(1,5),xlab="x",ylab="y")
lines(c(1,5),c(1,5),col="red")
lines(c(1,5,5),c(1,1,5),col="green")
text(c(1.1,5.1), "v")
text(c(1.3), "v")
plot(c(1,5),c(1,5),xlab="x",ylab="y")
lines(c(1,5),c(1,5),col="red")
lines(c(1,5,5),c(1,1,5),col="green")
text(c(1.3), "v")
plot(c(1,5),c(1,5),xlab="x",ylab="y")
lines(c(1,5),c(1,5),col="red")
lines(c(1,5,5),c(1,1,5),col="green")
text(1.3, "v")
?points
text(0:25, 0.6, 0:25, cex = 0.5)
plot(c(1,5),c(1,5),xlab="x",ylab="y")
lines(c(1,5),c(1,5),col="red")
lines(c(1,5,5),c(1,1,5),col="green")
text(c(1.3,5.3),c(1.3,5.3),labels = c("v","w"))
plot(c(1,5),c(1,5),xlab="x",ylab="y")
lines(c(1,5),c(1,5),col="red")
lines(c(1,5,5),c(1,1,5),col="green")
text(c(1,1),c(5,5),labels = c("v","w"))
plot(c(1,5),c(1,5),xlab="x",ylab="y")
lines(c(1,5),c(1,5),col="red")
lines(c(1,5,5),c(1,1,5),col="green")
text(c(1,5),c(1,5),labels = c("v","w"))
plot(c(1,5),c(1,5),xlab="x",ylab="y")
lines(c(1,5),c(1,5),col="red")
lines(c(1,5,5),c(1,1,5),col="green")
text(c(1,5.2),c(1.2,5),labels = c("v","w"))
plot(c(1,5),c(1,5),xlab="x",ylab="y")
lines(c(1,5),c(1,5),col="red")
lines(c(1,5,5),c(1,1,5),col="green")
text(c(1,4.8),c(1.2,4.8),labels = c("v","w"))
plot(c(1,5),c(1,5),xlab="x",ylab="y")
lines(c(1,5),c(1,5),col="red")
lines(c(1,5,5),c(1,1,5),col="green")
text(c(1,4.9),c(1.1,4.9),labels = c("v","w"))
plot(c(1,5),c(1,5),xlab="x",ylab="y")
lines(c(1,5),c(1,5),col="red")
lines(c(1,5,5),c(1,1,5),col="green")
text(c(1,4.9),c(1.2,4.9),labels = c("v","w"))
plot(c(1,5),c(1,5),xlab="x",ylab="y")
lines(c(1,5),c(1,5),col="red")
lines(c(1,5,5),c(1,1,5),col="green")
text(c(1,4.9),c(1.2,4.8),labels = c("v","w"))
plot(c(1,5),c(1,5),xlab="x",ylab="y",ylim=0:6)
lines(c(1,5),c(1,5),col="red")
lines(c(1,5,5),c(1,1,5),col="green")
text(c(1,4.9),c(1.2,4.8),labels = c("v","w"))
source('~/.active-rstudio-document')
plot(c(1,5),c(1,5),xlab="x",ylab="y",ylim=c(0,6))
lines(c(1,5),c(1,5),col="red")
lines(c(1,5,5),c(1,1,5),col="green")
text(c(1,5),c(1.2,5.2),labels = c("v","w"))
plot(c(1,5),c(1,5),xlab="x",ylab="y",ylim=c(0,6))
lines(c(1,5),c(1,5),col="red")
lines(c(1,5,5),c(1,1,5),col="green")
text(c(1,5),c(1,5),labels = c("v","w"),pos=3)
?ploymath
?plotmath
demo(plotmath)
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
demo(plotmath)
source('~/.active-rstudio-document')
text(4, 3, expression(hat(beta) == (X^t * X)^{-1} * X^t * y))
plot(c(1,5),c(1,5),xlab="x",ylab="y",ylim=c(0,6))
lines(c(1,5),c(1,5),col="red")
lines(c(1,5,5),c(1,1,5),col="green")
text(c(1,5),c(1,5),labels = expression(vec(v),vec(w)),pos=3)
text(c(1,5),c(1,5),labels = latex2exp(vec(v),vec(w)),pos=3)
source('~/.active-rstudio-document')
install.packages("latex2exp")
source('~/.active-rstudio-document')
help("latex2exp-deprecated")
install.packages("latex2exp")
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
load("C:/Users/sandy/Dropbox/2014_Sandy/Proposta de Tese/Implementações/.RData")
install.packages("latex2exp")
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
install.packages("TeX")
install.packages("TeX")
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
?TeX
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
a <- 1:100
plot(a, a^2, xlab=TeX("$\\alpha$"), ylab=TeX("$\\alpha^2$"))
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
library("parallel")
library("foreach")
library("doParallel")
detectCores()
q()
q()
source('C:/Users/sandy/Dropbox/2014_Sandy/DynamicCommunities/DynamicCommunities/repositorioClassesGrafos.R')
classesGrafos[1,] = c(300,150,30,60,30,0.05)
classesGrafos[2,] = c(300,150,30,60,30,0.20)
classesGrafos[3,] = c(600,300,60,120,60,0.05)
classesGrafos[4,] = c(600,300,60,120,60,0.20)
path = paste(pasta,"Classes de Grafo/",sep="")
path
colnames(classesGrafos) = c("nv","maxs","mins","maxd", "avgd", "mix" )
View(classesGrafos)
colnames(classesGrafos[1,])
colnames(classesGrafos[,1])
View(classesGrafos)
?colnames
colnames(classesGrafos)[,1]
colnames(classesGrafos)[1]
classe = 1
for (i in 1:nparametros){
aux = paste(colnames(classesGrafos)[i],classesGrafos[classe,i],sep="")
}
aux
aux = ""
for (i in 1:nparametros){
aux = paste(aux,colnames(classesGrafos)[i],classesGrafos[classe,i],sep="")
}
aux
classesGrafos[1,] = c(300,150,30,60,30,5)
classesGrafos[2,] = c(300,150,30,60,30,20)
classesGrafos[3,] = c(600,300,60,120,60,5)
classesGrafos[4,] = c(600,300,60,120,60,20)
for (i in 1:nparametros){
aux = paste(aux,colnames(classesGrafos)[i],classesGrafos[classe,i],sep="")
}
aux
3 in seq(2,3,4)
??pertinency
??elemnt
path = paste(path,aux,"/",sep="")
path
library(testthat)
classe = sample(nclasses,1)
classe = sample(nclasses,1)
classe = sample(nclasses,1)
classe = sample(nclasses,1)
source('C:/Users/sandy/Dropbox/2014_Sandy/DynamicCommunities/DynamicCommunities/repositorioClassesGrafos.R')
ajustaParametros(1)
nvertices
source('C:/Users/sandy/Dropbox/2014_Sandy/DynamicCommunities/DynamicCommunities/repositorioClassesGrafos.R')
source('C:/Users/sandy/Dropbox/2014_Sandy/DynamicCommunities/DynamicCommunities/repositorioClassesGrafos.R')
source('C:/Users/sandy/Dropbox/2014_Sandy/DynamicCommunities/DynamicCommunities/repositorioClassesGrafos.R')
path
criarGrafoInicial(path)
arquivo = paste(path,"main.exe",sep="")
arquivo
system(arquivo)
pathParametros(3)
criarGrafoInicial(path)
pathParametros <- function(classe){
path = paste(pasta,"Classes de Grafos/",sep="")
aux = ""
for (i in 1:nparametros){
aux = paste(aux,colnames(classesGrafos)[i],classesGrafos[classe,i],sep="")
}
path = paste(path,aux,"/",sep="")
return(path)
}
pathParametros(3)
path=pathParametros(3)
criarGrafoInicial(path)
path
criarGrafoInicial <- function(p){
arquivo = paste(p,"main.exe",sep="")
system(arquivo)
arquivo = paste(p,"network.dat",sep="")
rede = as.matrix(read.table(arquivo))
arquivo = paste(p,"community.dat",sep="")
comus = as.matrix(read.table(arquivo))
G = graph.edgelist(rede,directed=F)
G = simplify(G)
V(G)$p = 0
V(G)$p = comus[,2]
if (maiorComunidade(G)>maxsize){
G = criarGrafoInicial()
}
return(G)
}
g = criarGrafoInicial(path)
source('C:/Users/sandy/Dropbox/2014_Sandy/DynamicCommunities/DynamicCommunities/repositorioClassesGrafos.R')
source('C:/Users/sandy/Dropbox/2014_Sandy/DynamicCommunities/DynamicCommunities/repositorioClassesGrafos.R')
g = criarGrafoInicial(path)
source('C:/Users/sandy/Dropbox/2014_Sandy/DynamicCommunities/DynamicCommunities/DynamicalCommunities.R')
g = criarGrafoInicial(path)
system(paste("ls",path))
source('C:/Users/sandy/Dropbox/2014_Sandy/DynamicCommunities/DynamicCommunities/repositorioClassesGrafos.R')
g = criarGrafoInicial(path)
source('C:/Users/sandy/Dropbox/2014_Sandy/DynamicCommunities/DynamicCommunities/repositorioClassesGrafos.R')
g = criarGrafoInicial(path)
source('C:/Users/sandy/Dropbox/2014_Sandy/DynamicCommunities/DynamicCommunities/repositorioClassesGrafos.R')
g = criarGrafoInicial(path)
source('C:/Users/sandy/Dropbox/2014_Sandy/DynamicCommunities/DynamicCommunities/repositorioClassesGrafos.R')
g = criarGrafoInicial(path)
source('C:/Users/sandy/Dropbox/2014_Sandy/DynamicCommunities/DynamicCommunities/repositorioClassesGrafos.R')
source('C:/Users/sandy/Dropbox/2014_Sandy/DynamicCommunities/DynamicCommunities/repositorioClassesGrafos.R')
g = born(g)
print("ok")
born <- function(g, nmin = minsize, nmax = maxsize, dmax = maxdegree, mi = mixing){
taminicial = vcount(g)
tamcomu = sample(nmin:nmax,1)
if (taminicial != 0){
idcomu = max(V(g)$p)+1
}else{
idcomu = 1
}
print("ok")
for (i in 1:tamcomu){
g = add.vertices(g,1)
V(g)[vcount(g)]$p = idcomu
if (i==1){
if (taminicial != 0){
g = add.edges(g,c(vcount(g),sample(1:(vcount(g)-1),1)))
}
}else{
auxgrau = min((i+1),maxdegree)
grau = sample(2:auxgrau,1)
for (j in 1:grau){
conexao = sample(c("in","out"),1,replace=F,c(1-mi,mi))
if(taminicial == 0){
conexao = "in"
}
if (conexao=="out"){
espaco = as.vector(V(g)[V(g)$p!=idcomu])
v1 = vcount(g)
v2 = sample(espaco,1)
while(degree(g,v2) == maxdegree){
v2 = sample(espaco,1)
}
g = add.edges(g,c(v1,v2))
g = simplify(g)
}
if (conexao == "in"){
espaco = as.vector(V(g)[V(g)$p==idcomu])
v1 = vcount(g)
v2 = sample(espaco,1)
while(degree(g,v2) == maxdegree){
v2 = sample(espaco,1)
}
g = add.edges(g, c(v1,v2))
g = simplify(g)
}
}
}
}
print("ok")
dens = densidadeComunidade(g)
narestasout = length(E(g)[V(g)[V(g)$p==idcomu] %--% V(g)[V(g)$p!=idcomu]])
comumaxavgdegree = (((maxdegree*tamcomu)/2) - narestasout)/(tamcomu*(tamcomu-1)/2)
d = min(mean(dens),comumaxavgdegree)
d = max(d,(avgdegree-1)/tamcomu)
aux = T
while(graph.density(induced.subgraph(g,V(g)[V(g)$p==idcomu])) < (d) && aux){
espaco = as.vector(V(g)[V(g)$p==idcomu])
espaco = espaco[degree(g,espaco) < maxdegree]
if (length(espaco)>=2){
v1 = sample(espaco,1)
v2 = sample(espaco,1)
g = add.edges(g,c(v1,v2))
g = simplify(g)
}else{
aux = F
}
}
print("ok")
if (calculaMixing(g) < (mi-toleranciamixing)){
g = corrigeMixing(g,mi)
}
print("ok")
return(g)
}
g = born(g)
