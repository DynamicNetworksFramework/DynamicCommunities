plot(c(1,1,5,5),type="l")
plot(c(1,5),c(1,5),type="l")
plot(c(1,5),c(1,5))
lines(c(1,5),c(1,5))
grid)
grid()
plot(c(1,5),c(1,5))
lines(c(1,5),c(1,5),col="green")
lines(c(1,2,3,4,5),c(1,2,3,4,5),col="red")
lines(c(1,2,2,3,4,4,5),c(1,1,2,3,3,4,5,5),col="green")
lines(c(1,2,2,3,3,4,4,5,5),c(1,1,2,2,3,3,4,4,5),col="green")
plot(c(1,5),c(1,5),xlab="x",ylab="y")
lines(c(1,5),c(1,5),col="red")
lines(c(1,2,2,3,3,4,4,5,5),c(1,1,2,2,3,3,4,4,5),col="green")
source('~/.active-rstudio-document')
?plot
?lines
source('~/.active-rstudio-document')
?arrows
source('~/.active-rstudio-document')
?text
plot(-1:1, -1:1, type = "n", xlab = "Re", ylab = "Im")
K <- 16; text(exp(1i * 2 * pi * (1:K) / K), col = 2)
plot(c(1,5),c(1,5),xlab="x",ylab="y")
lines(c(1,5),c(1,5),col="red")
lines(c(1,5,5),c(1,1,5),col="green")
text(c(1,5), "v")
plot(c(1,5),c(1,5),xlab="x",ylab="y")
lines(c(1,5),c(1,5),col="red")
lines(c(1,5,5),c(1,1,5),col="green")
text(c(1.1,5.1), "v")
text(c(1.3), "v")
plot(c(1,5),c(1,5),xlab="x",ylab="y")
lines(c(1,5),c(1,5),col="red")
lines(c(1,5,5),c(1,1,5),col="green")
text(c(1.3), "v")
plot(c(1,5),c(1,5),xlab="x",ylab="y")
lines(c(1,5),c(1,5),col="red")
lines(c(1,5,5),c(1,1,5),col="green")
text(1.3, "v")
?points
text(0:25, 0.6, 0:25, cex = 0.5)
plot(c(1,5),c(1,5),xlab="x",ylab="y")
lines(c(1,5),c(1,5),col="red")
lines(c(1,5,5),c(1,1,5),col="green")
text(c(1.3,5.3),c(1.3,5.3),labels = c("v","w"))
plot(c(1,5),c(1,5),xlab="x",ylab="y")
lines(c(1,5),c(1,5),col="red")
lines(c(1,5,5),c(1,1,5),col="green")
text(c(1,1),c(5,5),labels = c("v","w"))
plot(c(1,5),c(1,5),xlab="x",ylab="y")
lines(c(1,5),c(1,5),col="red")
lines(c(1,5,5),c(1,1,5),col="green")
text(c(1,5),c(1,5),labels = c("v","w"))
plot(c(1,5),c(1,5),xlab="x",ylab="y")
lines(c(1,5),c(1,5),col="red")
lines(c(1,5,5),c(1,1,5),col="green")
text(c(1,5.2),c(1.2,5),labels = c("v","w"))
plot(c(1,5),c(1,5),xlab="x",ylab="y")
lines(c(1,5),c(1,5),col="red")
lines(c(1,5,5),c(1,1,5),col="green")
text(c(1,4.8),c(1.2,4.8),labels = c("v","w"))
plot(c(1,5),c(1,5),xlab="x",ylab="y")
lines(c(1,5),c(1,5),col="red")
lines(c(1,5,5),c(1,1,5),col="green")
text(c(1,4.9),c(1.1,4.9),labels = c("v","w"))
plot(c(1,5),c(1,5),xlab="x",ylab="y")
lines(c(1,5),c(1,5),col="red")
lines(c(1,5,5),c(1,1,5),col="green")
text(c(1,4.9),c(1.2,4.9),labels = c("v","w"))
plot(c(1,5),c(1,5),xlab="x",ylab="y")
lines(c(1,5),c(1,5),col="red")
lines(c(1,5,5),c(1,1,5),col="green")
text(c(1,4.9),c(1.2,4.8),labels = c("v","w"))
plot(c(1,5),c(1,5),xlab="x",ylab="y",ylim=0:6)
lines(c(1,5),c(1,5),col="red")
lines(c(1,5,5),c(1,1,5),col="green")
text(c(1,4.9),c(1.2,4.8),labels = c("v","w"))
source('~/.active-rstudio-document')
plot(c(1,5),c(1,5),xlab="x",ylab="y",ylim=c(0,6))
lines(c(1,5),c(1,5),col="red")
lines(c(1,5,5),c(1,1,5),col="green")
text(c(1,5),c(1.2,5.2),labels = c("v","w"))
plot(c(1,5),c(1,5),xlab="x",ylab="y",ylim=c(0,6))
lines(c(1,5),c(1,5),col="red")
lines(c(1,5,5),c(1,1,5),col="green")
text(c(1,5),c(1,5),labels = c("v","w"),pos=3)
?ploymath
?plotmath
demo(plotmath)
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
demo(plotmath)
source('~/.active-rstudio-document')
text(4, 3, expression(hat(beta) == (X^t * X)^{-1} * X^t * y))
plot(c(1,5),c(1,5),xlab="x",ylab="y",ylim=c(0,6))
lines(c(1,5),c(1,5),col="red")
lines(c(1,5,5),c(1,1,5),col="green")
text(c(1,5),c(1,5),labels = expression(vec(v),vec(w)),pos=3)
text(c(1,5),c(1,5),labels = latex2exp(vec(v),vec(w)),pos=3)
source('~/.active-rstudio-document')
install.packages("latex2exp")
source('~/.active-rstudio-document')
help("latex2exp-deprecated")
install.packages("latex2exp")
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
load("C:/Users/sandy/Dropbox/2014_Sandy/Proposta de Tese/Implementações/.RData")
install.packages("latex2exp")
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
install.packages("TeX")
install.packages("TeX")
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
?TeX
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
a <- 1:100
plot(a, a^2, xlab=TeX("$\\alpha$"), ylab=TeX("$\\alpha^2$"))
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
library("parallel")
library("foreach")
library("doParallel")
detectCores()
q()
q()
?tryCatch
demo(error.catching)
?str
source('C:/Users/sandy/Dropbox/2014_Sandy/DynamicCommunities/DynamicCommunities/DynamicalCommunities.R')
source('C:/Users/sandy/Dropbox/2014_Sandy/DynamicCommunities/DynamicCommunities/DynamicalCommunities.R')
V(g)$p==0 || unique(V(g)$p)==0
source('C:/Users/sandy/Dropbox/2014_Sandy/DynamicCommunities/DynamicCommunities/DynamicalCommunities.R')
g = make_empty_graph(0,F)
V(g)$p = 0
V(g)$p==0 || unique(V(g)$p)==0
V(g)$p==0
unique(V(g)$p)
unique(V(g)$p)==0
is.true(V(g)$p==0)
V(g)$p
unique(V(g)$p)==0
any(unique(V(g)$p==0))
??TRUE
all(unique(V(g)$p==0))
any(unique(V(g)$p==0))
isTRUE(V(G)$p==0)
isTRUE(V(g)$p==0)
isTRUE(unique(V(g)$p)==0)
unique()
unique(V(g)$p)
V(g)$p
V(g)$p = c()
V(g)$p = c(0)
source('C:/Users/sandy/Dropbox/2014_Sandy/DynamicCommunities/DynamicCommunities/DynamicalCommunities.R')
g = make_empty_graph(0,F)
V(g)$p = c(0)
V(g)$p
unique(V(g)$p)
V(g)$p = rep(vgcount(g),0)
V(g)$p = rep(vcount(g),0)
source('C:/Users/sandy/Dropbox/2014_Sandy/DynamicCommunities/DynamicCommunities/testDynamicalCommunities.R')
source('C:/Users/sandy/Dropbox/2014_Sandy/DynamicCommunities/DynamicCommunities/DynamicalCommunities.R')
??empty
source('C:/Users/sandy/Dropbox/2014_Sandy/DynamicCommunities/DynamicCommunities/DynamicalCommunities.R')
source('C:/Users/sandy/Dropbox/2014_Sandy/DynamicCommunities/DynamicCommunities/DynamicalCommunities.R')
ntestes = length(resultadosTestes)
for(i in 1:ntestes){
nresults = length(resultadosTestes[[i]]$results)
for (j in 1:nresults){
if (!resultadosTestes[[i]]$results[[j]]$passed){
st = resultadosTestes[[1]]$results[[1]]$failure_msg
st = str_replace(st,"\n",", ")
aux = c(seed,st)
write(aux,arquivoErro,ncolumns=2,append=T,sep="\t")
}
}
}
ntestes = length(resultadosTestes)
for(i in 1:ntestes){
nresults = length(resultadosTestes[[i]]$results)
for (j in 1:nresults){
if (!resultadosTestes[[i]]$results[[j]]$passed){
st = resultadosTestes[[i]]$results[[j]]$failure_msg
st = str_replace(st,"\n",", ")
aux = c(seed,st)
write(aux,arquivoErro,ncolumns=2,append=T,sep="\t")
}
}
}
dens = densidade(g)
g = born(g)
g = make_empty_graph(0,F)
V(g)$p = 0
g = born(g)
mean(degree(g))
dens = densidade(g)
narestasout = length(E(g)[V(g)[V(g)$p==idcomu] %--% V(g)[V(g)$p!=idcomu]])
idcomu = 1
narestasout = length(E(g)[V(g)[V(g)$p==idcomu] %--% V(g)[V(g)$p!=idcomu]])
d = min(dens,comumaxdegree)
comumaxdegree = (((maxdegree*tamcomu)/2) - narestasout)/(tamcomu*(tamcomu-1)/2)
tamcomu = length(V(g)[V(g)$p==idcomu])
comumaxdegree = (((maxdegree*tamcomu)/2) - narestasout)/(tamcomu*(tamcomu-1)/2)
print(g)
plot(g)
graph.density(induced.subgraph(g,V(g)[V(g)$p==idcomu]))
source('C:/Users/sandy/Dropbox/2014_Sandy/DynamicCommunities/DynamicCommunities/DynamicalCommunities.R')
source('C:/Users/sandy/Dropbox/2014_Sandy/DynamicCommunities/DynamicCommunities/DynamicalCommunities.R')
g = make_empty_graph(0,F)
V(g)$p = 0
g = born(g)
nc = length(unique(V(g)$p[V(g)$p!=0]))
expect_that(nc, equals(1))
mean(degree(g))
source('C:/Users/sandy/Dropbox/2014_Sandy/DynamicCommunities/DynamicCommunities/DynamicalCommunities.R')
dens = densidade(g)
narestasout = length(E(g)[V(g)[V(g)$p==idcomu] %--% V(g)[V(g)$p!=idcomu]])
comumaxavgdegree = (((maxdegree*tamcomu)/2) - narestasout)/(tamcomu*(tamcomu-1)/2)
d = min(dens,comumaxavgdegree)
mean(degree(g))
set.seed(seed)
g = make_empty_graph(0,F)
V(g)$p = 0
g = born(g)
mean(degree(g))
dens = densidade(g)
comumaxavgdegree = (((maxdegree*tamcomu)/2) - narestasout)/(tamcomu*(tamcomu-1)/2)
narestasout = length(E(g)[V(g)[V(g)$p==idcomu] %--% V(g)[V(g)$p!=idcomu]])
tamcomu = vcount(g)
comumaxavgdegree = (((maxdegree*tamcomu)/2) - narestasout)/(tamcomu*(tamcomu-1)/2)
dens*vcount(g)
degree(g)
