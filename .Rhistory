plot(c(1,1,5,5),type="l")
plot(c(1,5),c(1,5),type="l")
plot(c(1,5),c(1,5))
lines(c(1,5),c(1,5))
grid)
grid()
plot(c(1,5),c(1,5))
lines(c(1,5),c(1,5),col="green")
lines(c(1,2,3,4,5),c(1,2,3,4,5),col="red")
lines(c(1,2,2,3,4,4,5),c(1,1,2,3,3,4,5,5),col="green")
lines(c(1,2,2,3,3,4,4,5,5),c(1,1,2,2,3,3,4,4,5),col="green")
plot(c(1,5),c(1,5),xlab="x",ylab="y")
lines(c(1,5),c(1,5),col="red")
lines(c(1,2,2,3,3,4,4,5,5),c(1,1,2,2,3,3,4,4,5),col="green")
source('~/.active-rstudio-document')
?plot
?lines
source('~/.active-rstudio-document')
?arrows
source('~/.active-rstudio-document')
?text
plot(-1:1, -1:1, type = "n", xlab = "Re", ylab = "Im")
K <- 16; text(exp(1i * 2 * pi * (1:K) / K), col = 2)
plot(c(1,5),c(1,5),xlab="x",ylab="y")
lines(c(1,5),c(1,5),col="red")
lines(c(1,5,5),c(1,1,5),col="green")
text(c(1,5), "v")
plot(c(1,5),c(1,5),xlab="x",ylab="y")
lines(c(1,5),c(1,5),col="red")
lines(c(1,5,5),c(1,1,5),col="green")
text(c(1.1,5.1), "v")
text(c(1.3), "v")
plot(c(1,5),c(1,5),xlab="x",ylab="y")
lines(c(1,5),c(1,5),col="red")
lines(c(1,5,5),c(1,1,5),col="green")
text(c(1.3), "v")
plot(c(1,5),c(1,5),xlab="x",ylab="y")
lines(c(1,5),c(1,5),col="red")
lines(c(1,5,5),c(1,1,5),col="green")
text(1.3, "v")
?points
text(0:25, 0.6, 0:25, cex = 0.5)
plot(c(1,5),c(1,5),xlab="x",ylab="y")
lines(c(1,5),c(1,5),col="red")
lines(c(1,5,5),c(1,1,5),col="green")
text(c(1.3,5.3),c(1.3,5.3),labels = c("v","w"))
plot(c(1,5),c(1,5),xlab="x",ylab="y")
lines(c(1,5),c(1,5),col="red")
lines(c(1,5,5),c(1,1,5),col="green")
text(c(1,1),c(5,5),labels = c("v","w"))
plot(c(1,5),c(1,5),xlab="x",ylab="y")
lines(c(1,5),c(1,5),col="red")
lines(c(1,5,5),c(1,1,5),col="green")
text(c(1,5),c(1,5),labels = c("v","w"))
plot(c(1,5),c(1,5),xlab="x",ylab="y")
lines(c(1,5),c(1,5),col="red")
lines(c(1,5,5),c(1,1,5),col="green")
text(c(1,5.2),c(1.2,5),labels = c("v","w"))
plot(c(1,5),c(1,5),xlab="x",ylab="y")
lines(c(1,5),c(1,5),col="red")
lines(c(1,5,5),c(1,1,5),col="green")
text(c(1,4.8),c(1.2,4.8),labels = c("v","w"))
plot(c(1,5),c(1,5),xlab="x",ylab="y")
lines(c(1,5),c(1,5),col="red")
lines(c(1,5,5),c(1,1,5),col="green")
text(c(1,4.9),c(1.1,4.9),labels = c("v","w"))
plot(c(1,5),c(1,5),xlab="x",ylab="y")
lines(c(1,5),c(1,5),col="red")
lines(c(1,5,5),c(1,1,5),col="green")
text(c(1,4.9),c(1.2,4.9),labels = c("v","w"))
plot(c(1,5),c(1,5),xlab="x",ylab="y")
lines(c(1,5),c(1,5),col="red")
lines(c(1,5,5),c(1,1,5),col="green")
text(c(1,4.9),c(1.2,4.8),labels = c("v","w"))
plot(c(1,5),c(1,5),xlab="x",ylab="y",ylim=0:6)
lines(c(1,5),c(1,5),col="red")
lines(c(1,5,5),c(1,1,5),col="green")
text(c(1,4.9),c(1.2,4.8),labels = c("v","w"))
source('~/.active-rstudio-document')
plot(c(1,5),c(1,5),xlab="x",ylab="y",ylim=c(0,6))
lines(c(1,5),c(1,5),col="red")
lines(c(1,5,5),c(1,1,5),col="green")
text(c(1,5),c(1.2,5.2),labels = c("v","w"))
plot(c(1,5),c(1,5),xlab="x",ylab="y",ylim=c(0,6))
lines(c(1,5),c(1,5),col="red")
lines(c(1,5,5),c(1,1,5),col="green")
text(c(1,5),c(1,5),labels = c("v","w"),pos=3)
?ploymath
?plotmath
demo(plotmath)
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
demo(plotmath)
source('~/.active-rstudio-document')
text(4, 3, expression(hat(beta) == (X^t * X)^{-1} * X^t * y))
plot(c(1,5),c(1,5),xlab="x",ylab="y",ylim=c(0,6))
lines(c(1,5),c(1,5),col="red")
lines(c(1,5,5),c(1,1,5),col="green")
text(c(1,5),c(1,5),labels = expression(vec(v),vec(w)),pos=3)
text(c(1,5),c(1,5),labels = latex2exp(vec(v),vec(w)),pos=3)
source('~/.active-rstudio-document')
install.packages("latex2exp")
source('~/.active-rstudio-document')
help("latex2exp-deprecated")
install.packages("latex2exp")
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
load("C:/Users/sandy/Dropbox/2014_Sandy/Proposta de Tese/Implementações/.RData")
install.packages("latex2exp")
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
install.packages("TeX")
install.packages("TeX")
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
?TeX
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
a <- 1:100
plot(a, a^2, xlab=TeX("$\\alpha$"), ylab=TeX("$\\alpha^2$"))
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
library("parallel")
library("foreach")
library("doParallel")
detectCores()
q()
q()
source('C:/Users/sandy/Dropbox/2014_Sandy/DynamicCommunities/DynamicCommunities/repositorioClassesGrafos.R')
source('C:/Users/sandy/Dropbox/2014_Sandy/DynamicCommunities/DynamicCommunities/repositorioClassesGrafos.R')
source('C:/Users/sandy/Dropbox/2014_Sandy/DynamicCommunities/DynamicCommunities/repositorioClassesGrafos.R')
source('C:/Users/sandy/Dropbox/2014_Sandy/DynamicCommunities/DynamicCommunities/repositorioClassesGrafos.R')
g = criarGrafoInicial(path)
path
path = pathParametros(1)
classe = 1
nvertices = classesGrafos[classe,"nv"]
avgdegree = classesGrafos[classe,"avgd"]
maxdegree = classesGrafos[classe,"maxd"]
mixing = classesGrafos[classe,"mix"]/100
toleranciamixing = 0.03
minsize = classesGrafos[classe,"mins"]
maxsize = classesGrafos[classe,"maxs"]
g = criarGrafoInicial(path)
comu = sample(unique(V(g)$p),1)
aux = V(g)$p[V(g)$p==comu]
aux = V(g)[V(g)$p==comu]
v1 = sample(aux,1)
vizinhos = neighbors(g,v1)
vizinhos = vizinhos[V(vizinhos)$p==comu]
v1 = sample(aux,1)
vizinhos = as.vector(neighbors(g,v1))
vizinhos = vizinhos[V(vizinhos)$p==comu]
vizinhos = as.vector(neighbors(g,v1))
vizinhos = vizinhos[V(g)$p==comu]
vizinhos = as.vector(neighbors(g,v1))
vizinhos = vizinhos[V(g)[vizinhos]$p==comu]
v2 = sample(vizinhos,1)
vizinhos2 = as.vector(neighbors(g,v2))
vizinhos2 = vizinhos2[V(g)[vizinhos2]$p==comu]
aux = c(1:vcount(g))
aux = aux[V(g)[aux]$p!=comu]
aux = c(1:vcount(g))
aux = aux[V(g)[aux]$p!=comu]
v3 = sample(aux,1)
while(degree(g,v3)>= maxdegree){
v3 = sample(aux,1)
}
v4 = sample(aux,1)
while(degree(g,v3)>= maxdegree){
v4 = sample(aux,1)
}
aux = V(g)[V(g)$p!=comu]
v3 = sample(aux,1)
while(degree(g,v3)>= maxdegree){
v3 = sample(aux,1)
}
v4 = sample(aux,1)
while(degree(g,v4)>= maxdegree){
v4 = sample(aux,1)
}
aux = V(g)[V(g)$p==comu]
v1 = sample(aux,1)
vizinhos = neighbors(g,v1)
vizinhos = vizinhos[V(g)[vizinhos]$p==comu]
while (length(vizinhos)<=2){
v1 = sample(aux,1)
vizinhos = neighbors(g,v1)
vizinhos = vizinhos[V(g)[vizinhos]$p==comu]
}
v2 = sample(vizinhos,1)
vizinhos2 = neighbors(g,v2)
vizinhos2 = vizinhos2[V(g)[vizinhos2]$p==comu]
while(length(vizinhos2)<=2){
v2 = sample(vizinhos,1)
vizinhos2 = neighbors(g,v2)
vizinhos2 = vizinhos2[V(g)[vizinhos2]$p==comu]
}
aux = V(g)[V(g)$p!=comu]
v3 = sample(aux,1)
while(degree(g,v3)>= maxdegree){
v3 = sample(aux,1)
}
v4 = sample(aux,1)
while(degree(g,v4)>= maxdegree){
v4 = sample(aux,1)
}
aresta = get.edge.ids(g,c(v1,v2))
aux = V(g)[V(g)$p==comu]
v1 = sample(aux,1)
vizinhos = neighbors(g,v1)
vizinhos = vizinhos[V(g)[vizinhos]$p==comu]
while (length(vizinhos)<=2){
v1 = sample(aux,1)
vizinhos = neighbors(g,v1)
vizinhos = vizinhos[V(g)[vizinhos]$p==comu]
}
v2 = sample(vizinhos,1)
vizinhos2 = neighbors(g,v2)
vizinhos2 = vizinhos2[V(g)[vizinhos2]$p==comu]
while(length(vizinhos2)<=2){
v2 = sample(vizinhos,1)
vizinhos2 = neighbors(g,v2)
vizinhos2 = vizinhos2[V(g)[vizinhos2]$p==comu]
}
aux = V(g)[V(g)$p!=comu]
v3 = sample(aux,1)
while(degree(g,v3)>= maxdegree){
v3 = sample(aux,1)
}
v4 = sample(aux,1)
while(degree(g,v4)>= maxdegree){
v4 = sample(aux,1)
}
aresta = get.edge.ids(g,c(v1,v2))
g = delete.edges(g,aresta)
g = add.edges(g,c(v1,v3))
g = add.edges(g,c(v2,v4))
g = simplify(g)
if(calculaMixing(g)<(mixing-toleranciamixing)){
g = corrigeMixing(g,mi,comu)
}
return(g)
aux = V(g)[V(g)$p==comu]
v1 = sample(aux,1)
vizinhos = neighbors(g,v1)
vizinhos = vizinhos[V(g)[vizinhos]$p==comu]
while (length(vizinhos)<=2){
v1 = sample(aux,1)
vizinhos = neighbors(g,v1)
vizinhos = vizinhos[V(g)[vizinhos]$p==comu]
}
v2 = sample(vizinhos,1)
vizinhos2 = neighbors(g,v2)
vizinhos2 = vizinhos2[V(g)[vizinhos2]$p==comu]
while(length(vizinhos2)<=2){
v2 = sample(vizinhos,1)
vizinhos2 = neighbors(g,v2)
vizinhos2 = vizinhos2[V(g)[vizinhos2]$p==comu]
}
aux = V(g)[V(g)$p!=comu]
v3 = sample(aux,1)
while(degree(g,v3)>= maxdegree){
v3 = sample(aux,1)
}
v4 = sample(aux,1)
while(degree(g,v4)>= maxdegree){
v4 = sample(aux,1)
}
aresta = get.edge.ids(g,c(v1,v2))
g = delete.edges(g,aresta)
g = add.edges(g,c(v1,v3))
aux = as.vector(V(g)[V(g)$p==comu])
v1 = sample(aux,1)
vizinhos = neighbors(g,v1)
vizinhos = vizinhos[V(g)[vizinhos]$p==comu]
while (length(vizinhos)<=2){
v1 = sample(aux,1)
vizinhos = neighbors(g,v1)
vizinhos = vizinhos[V(g)[vizinhos]$p==comu]
}
v2 = sample(vizinhos,1)
vizinhos2 = neighbors(g,v2)
vizinhos2 = vizinhos2[V(g)[vizinhos2]$p==comu]
while(length(vizinhos2)<=2){
v2 = sample(vizinhos,1)
vizinhos2 = neighbors(g,v2)
vizinhos2 = vizinhos2[V(g)[vizinhos2]$p==comu]
}
aux = as.vector(V(g)[V(g)$p!=comu])
v3 = sample(aux,1)
while(degree(g,v3)>= maxdegree){
v3 = sample(aux,1)
}
v4 = sample(aux,1)
while(degree(g,v4)>= maxdegree){
v4 = sample(aux,1)
}
aux = as.vector(V(g)[V(g)$p==comu])
v1 = sample(aux,1)
vizinhos = as.vector(neighbors(g,v1))
vizinhos = vizinhos[V(g)[vizinhos]$p==comu]
while (length(vizinhos)<=2){
v1 = sample(aux,1)
vizinhos = as.vector(neighbors(g,v1))
vizinhos = vizinhos[V(g)[vizinhos]$p==comu]
}
v2 = sample(vizinhos,1)
vizinhos2 = as.vector(neighbors(g,v2))
vizinhos2 = vizinhos2[V(g)[vizinhos2]$p==comu]
while(length(vizinhos2)<=2){
v2 = sample(vizinhos,1)
vizinhos2 = as.vector(neighbors(g,v2))
vizinhos2 = vizinhos2[V(g)[vizinhos2]$p==comu]
}
aux = as.vector(V(g)[V(g)$p!=comu])
v3 = sample(aux,1)
while(degree(g,v3)>= maxdegree){
v3 = sample(aux,1)
}
v4 = sample(aux,1)
while(degree(g,v4)>= maxdegree){
v4 = sample(aux,1)
}
aresta = get.edge.ids(g,c(v1,v2))
g = delete.edges(g,aresta)
g = add.edges(g,c(v1,v3))
g = add.edges(g,c(v2,v4))
g = simplify(g)
if(calculaMixing(g)<(mixing-toleranciamixing)){
g = corrigeMixing(g,mi,comu)
}
corrigeMixing <- function(g,comu){
aux = as.vector(V(g)[V(g)$p==comu])
v1 = sample(aux,1)
vizinhos = as.vector(neighbors(g,v1))
vizinhos = vizinhos[V(g)[vizinhos]$p==comu]
while (length(vizinhos)<=2){
v1 = sample(aux,1)
vizinhos = as.vector(neighbors(g,v1))
vizinhos = vizinhos[V(g)[vizinhos]$p==comu]
}
v2 = sample(vizinhos,1)
vizinhos2 = as.vector(neighbors(g,v2))
vizinhos2 = vizinhos2[V(g)[vizinhos2]$p==comu]
while(length(vizinhos2)<=2){
v2 = sample(vizinhos,1)
vizinhos2 = as.vector(neighbors(g,v2))
vizinhos2 = vizinhos2[V(g)[vizinhos2]$p==comu]
}
aux = as.vector(V(g)[V(g)$p!=comu])
v3 = sample(aux,1)
while(degree(g,v3)>= maxdegree){
v3 = sample(aux,1)
}
v4 = sample(aux,1)
while(degree(g,v4)>= maxdegree){
v4 = sample(aux,1)
}
aresta = get.edge.ids(g,c(v1,v2))
g = delete.edges(g,aresta)
g = add.edges(g,c(v1,v3))
g = add.edges(g,c(v2,v4))
g = simplify(g)
if(calculaMixing(g)<(mixing-toleranciamixing)){
g = corrigeMixing(g,comu)
}
return(g)
}
aux = as.vector(V(g)[V(g)$p==comu])
v1 = sample(aux,1)
vizinhos = as.vector(neighbors(g,v1))
vizinhos = vizinhos[V(g)[vizinhos]$p==comu]
while (length(vizinhos)<=2){
v1 = sample(aux,1)
vizinhos = as.vector(neighbors(g,v1))
vizinhos = vizinhos[V(g)[vizinhos]$p==comu]
}
v2 = sample(vizinhos,1)
vizinhos2 = as.vector(neighbors(g,v2))
vizinhos2 = vizinhos2[V(g)[vizinhos2]$p==comu]
while(length(vizinhos2)<=2){
v2 = sample(vizinhos,1)
vizinhos2 = as.vector(neighbors(g,v2))
vizinhos2 = vizinhos2[V(g)[vizinhos2]$p==comu]
}
aux = as.vector(V(g)[V(g)$p!=comu])
v3 = sample(aux,1)
while(degree(g,v3)>= maxdegree){
v3 = sample(aux,1)
}
v4 = sample(aux,1)
while(degree(g,v4)>= maxdegree){
v4 = sample(aux,1)
}
aresta = get.edge.ids(g,c(v1,v2))
g = delete.edges(g,aresta)
g = add.edges(g,c(v1,v3))
g = add.edges(g,c(v2,v4))
g = simplify(g)
if(calculaMixing(g)<(mixing-toleranciamixing)){
g = corrigeMixing(g,comu)
}
return(g)
calculaMixing(g)
source('C:/Users/sandy/Dropbox/2014_Sandy/DynamicCommunities/DynamicCommunities/DynamicalCommunities.R')
source('C:/Users/sandy/Dropbox/2014_Sandy/DynamicCommunities/DynamicCommunities/repositorioClassesGrafos.R')
source('C:/Users/sandy/Dropbox/2014_Sandy/DynamicCommunities/DynamicCommunities/repositorioClassesGrafos.R')
source('C:/Users/sandy/Dropbox/2014_Sandy/DynamicCommunities/DynamicCommunities/repositorioClassesGrafos.R')
g = criarGrafoInicial()
g = criarGrafoInicial(path)
criarGrafoInicial <- function(p){
arquivo = paste(p,"main.exe",sep="")
setwd(p)
system(arquivo)
arquivo = paste(p,"network.dat",sep="")
rede = as.matrix(read.table(arquivo))
arquivo = paste(p,"community.dat",sep="")
comus = as.matrix(read.table(arquivo))
G = graph.edgelist(rede,directed=F)
G = simplify(G)
V(G)$p = 0
V(G)$p = comus[,2]
if (maiorComunidade(G)>maxsize){
G = criarGrafoInicial()
}
setwd(pasta)
return(G)
}
g = criarGrafoInicial(path)
source('C:/Users/sandy/Dropbox/2014_Sandy/DynamicCommunities/DynamicCommunities/repositorioClassesGrafos.R')
degree(g)
degree(g)[V(g)$p==1]
length(V(g)[v(g)$p==1])
length(V(g)[V(g)$p==1])
nc = unique(V(g)$p)
temp = 0
for (i in nc){
vout = length(E(g)[V(g)[V(g)$p==i] %--% V(g)[V(g)$p!=i]])
vtotal = sum(degree(g)[V(g)$p==i])
temp = temp +vout/vtotal
}
temp/length(nc)
source('C:/Users/sandy/Dropbox/2014_Sandy/DynamicCommunities/DynamicCommunities/repositorioClassesGrafos.R')
source('C:/Users/sandy/Dropbox/2014_Sandy/DynamicCommunities/DynamicCommunities/repositorioClassesGrafos.R')
avgdegree/142
nvertices = as.numeric(nvertices)
source('C:/Users/sandy/Dropbox/2014_Sandy/DynamicCommunities/DynamicCommunities/repositorioClassesGrafos.R')
source('C:/Users/sandy/Dropbox/2014_Sandy/DynamicCommunities/DynamicCommunities/repositorioClassesGrafos.R')
source('C:/Users/sandy/Dropbox/2014_Sandy/DynamicCommunities/DynamicCommunities/repositorioClassesGrafos.R')
source('C:/Users/sandy/Dropbox/2014_Sandy/DynamicCommunities/DynamicCommunities/repositorioClassesGrafos.R')
source('C:/Users/sandy/Dropbox/2014_Sandy/DynamicCommunities/DynamicCommunities/repositorioClassesGrafos.R')
source('C:/Users/sandy/Dropbox/2014_Sandy/DynamicCommunities/DynamicCommunities/repositorioClassesGrafos.R')
source('C:/Users/sandy/Dropbox/2014_Sandy/DynamicCommunities/DynamicCommunities/repositorioClassesGrafos.R')
